// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: notifications.proto

package notific_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificServiceGRPCClient is the client API for NotificServiceGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificServiceGRPCClient interface {
	SmsSend(ctx context.Context, in *RequestSMS, opts ...grpc.CallOption) (*RespListSMS, error)
	EmailSend(ctx context.Context, in *RequestEmail, opts ...grpc.CallOption) (*RespListEmail, error)
}

type notificServiceGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificServiceGRPCClient(cc grpc.ClientConnInterface) NotificServiceGRPCClient {
	return &notificServiceGRPCClient{cc}
}

func (c *notificServiceGRPCClient) SmsSend(ctx context.Context, in *RequestSMS, opts ...grpc.CallOption) (*RespListSMS, error) {
	out := new(RespListSMS)
	err := c.cc.Invoke(ctx, "/notific_service.NotificServiceGRPC/SmsSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificServiceGRPCClient) EmailSend(ctx context.Context, in *RequestEmail, opts ...grpc.CallOption) (*RespListEmail, error) {
	out := new(RespListEmail)
	err := c.cc.Invoke(ctx, "/notific_service.NotificServiceGRPC/EmailSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificServiceGRPCServer is the server API for NotificServiceGRPC service.
// All implementations must embed UnimplementedNotificServiceGRPCServer
// for forward compatibility
type NotificServiceGRPCServer interface {
	SmsSend(context.Context, *RequestSMS) (*RespListSMS, error)
	EmailSend(context.Context, *RequestEmail) (*RespListEmail, error)
	mustEmbedUnimplementedNotificServiceGRPCServer()
}

// UnimplementedNotificServiceGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedNotificServiceGRPCServer struct {
}

func (UnimplementedNotificServiceGRPCServer) SmsSend(context.Context, *RequestSMS) (*RespListSMS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsSend not implemented")
}
func (UnimplementedNotificServiceGRPCServer) EmailSend(context.Context, *RequestEmail) (*RespListEmail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailSend not implemented")
}
func (UnimplementedNotificServiceGRPCServer) mustEmbedUnimplementedNotificServiceGRPCServer() {}

// UnsafeNotificServiceGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificServiceGRPCServer will
// result in compilation errors.
type UnsafeNotificServiceGRPCServer interface {
	mustEmbedUnimplementedNotificServiceGRPCServer()
}

func RegisterNotificServiceGRPCServer(s grpc.ServiceRegistrar, srv NotificServiceGRPCServer) {
	s.RegisterService(&NotificServiceGRPC_ServiceDesc, srv)
}

func _NotificServiceGRPC_SmsSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSMS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificServiceGRPCServer).SmsSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notific_service.NotificServiceGRPC/SmsSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificServiceGRPCServer).SmsSend(ctx, req.(*RequestSMS))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificServiceGRPC_EmailSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificServiceGRPCServer).EmailSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notific_service.NotificServiceGRPC/EmailSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificServiceGRPCServer).EmailSend(ctx, req.(*RequestEmail))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificServiceGRPC_ServiceDesc is the grpc.ServiceDesc for NotificServiceGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificServiceGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notific_service.NotificServiceGRPC",
	HandlerType: (*NotificServiceGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SmsSend",
			Handler:    _NotificServiceGRPC_SmsSend_Handler,
		},
		{
			MethodName: "EmailSend",
			Handler:    _NotificServiceGRPC_EmailSend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notifications.proto",
}
